
package Day23;

public class LambdaDemo {
    public static void main(String args[]){
        LambdaDemo tester = new LambdaDemo();

        LambdaDemo tester1 = new LambdaDemo();

        // 带有类型声明的表达式
        MathOperation addition = (int a, int b) -> a + b;

        // 没有类型声明的表达式
        MathOperation subtraction = (a, b) -> a - b;

        // 带有大括号、带有返回语句的表达式
        MathOperation multiplication = (int a, int b) -> { return a * b; };

        // 没有大括号和return语句的表达式
        MathOperation division = (int a, int b) -> a / b;
        MathOperation max = (int a,int b) -> Math.max(a,b);
        MathOperation min = (int a,int b) -> Math.min(a,b);

        OtherMathOperation division1 = (int a, int b) -> a * b;
        OtherMathOperation max1 = (int a,int b) -> Math.min(a,b);
        OtherMathOperation min1 = (int a,int b) -> Math.max(a,b);


        // 输出结果
        System.out.println("10 + 5 = " + tester.operate(10, 5, addition));
        System.out.println("10 - 5 = " + tester.operate(10, 5, subtraction));
        System.out.println("10 x 5 = " + tester.operate(10, 5, multiplication));
        System.out.println("10 / 5 = " + tester.operate(10, 5, division));
        System.out.println("max = " + tester.operate(10, 5, max));
        System.out.println("min = " + tester.operate(10, 5, min));


        //System.out.println("10 + 5 = " + tester.otheroperate()operate(10, 5, addition));
        //System.out.println("10 - 5 = " + tester.otheroperate()operate(10, 5, subtraction));
       // System.out.println("10 x 5 = " + tester1.otheroperate(10, 5, multiplication1));

        //tester1.otheroperate(10, 5, division)); 是错的， 不能转换
        //System.out.println("10 / 5 = " + tester1.otheroperate(10, 5, division));

        System.out.println("10 / 5 = " + tester1.otheroperate(10, 5, division1));
        System.out.println("max = " + tester.otheroperate(10, 5, max1));
        System.out.println("min = " + tester.otheroperate(10, 5, min1));

        // 没有括号的表达式
        GreetingService greetService1 = message ->
                System.out.println("Hello " + message);

        // 有括号的表达式
        GreetingService greetService2 = (message) ->
                System.out.println("Hello " + message);

        // 调用sayMessage方法输出结果
        greetService1.sayMessage("aaaaaaaaaa");
        greetService2.sayMessage("bbbbbbb");
    }

    // 下面是定义的一些接口和方法

    interface MathOperation {
        int operation(int a, int b);
    } 

    interface GreetingService {
        void sayMessage(String message);
    }

    private int operate(int a, int b, MathOperation mathOperation){
        return mathOperation.operation(a, b);
    }

    interface OtherMathOperation {
        int operation(int a, int b);
    }

    interface OtherGreetingService {
        void sayMessage(String message);
    }

    private int otheroperate(int a, int b, OtherMathOperation othermathOperation){
        return othermathOperation.operation(a, b);
    }



}
