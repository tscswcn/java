抽象窗口工具包 （Abstract Windowing Toolkit） (AWT)是Java的平台独立的窗口系统，
AWT工具
AWT工具
图形和用户界面器件工具包。AWT是Java基础类 (JFC)的一部分，为Java程序提供图形用户界面(GUI)的标准API。
AWT提供了JavaApplet和Java Application中可用的用户图形界面GUI中的基本组件(components)。由于Java是一种独立于平台的程序设计语言，但GUI却往往是依赖于特定平台的，Java采用了相应的技术使得AWT能提供给应用程序独立于机器平台的接口，这保证了同一程序的GUI在不同机器上运行具有类似的外观（不一定完全一致）。
Java1.0的AWT(旧AWT)和Java1.1以后的AWT(新AWT)有着很大的区别，新的AWT克服了旧AWT的很多缺点，在设计上有较大改进，使用也更方便，这里主要介绍新的AWT, 但在Java1.1及以后版本中旧的AWT的程序也可运行。
Abstract Window Toolkit（AWT）是一个图形过程库，使用Java语言通过位图显示来操纵窗口。最后设计者又将AWT扩充为Alternative Window工具箱和Applet Widget工具箱。最新的GUI接口称为Swing，扩展了AWT，程序开发人员可以利用Swing生成独立于平台的GUI对象。 [1] 
区别
抽象窗口工具包AWT (AbstractWindow Toolkit) 是 API为Java 程序提供的建立图形用户界面GUI (Graphics User Interface)工具集，AWT可用于Java的applet和applications中。它支持图形用户界面编程的功能包括： 用户界面组件；事件处理模型；图形和图像工具，包括形状、颜色和字体类；布局管理器，可以进行灵活的窗口布局而与特定窗口的尺寸和屏幕分辨率无关；数据传送类，可以通过本地平台的剪贴板来进行剪切和粘贴。
优势
Java释出的时候，AWT作为Java最弱的组件受到不小的批评。最根本的缺点是AWT在原生的用户界面之上仅提供了一个非常薄的抽象层。例如，生成一个AWT的复选框会导致AWT直接调用下层原生例程来生成一个复选框。不幸的是，一个Windows平台上的复选框同MacOS平台或者各种UNIX风格平台上的复选框并不是那么相同。
AWT
AWT
这种糟糕的设计选择使得那些拥护Java“一次编写，到处运行 （write once, run anywhere）”信条的程序员们过得并不舒畅，因为AWT并不能保证他们的应用在各种平台上表现得有多相似。一个AWT应用可能在Windows上表现很好可是到了Macintosh上几乎不能使用，或者正好相反。在90年代，程序员中流传着一个笑话:Java的真正信条是“一次编写，到处测试 （write once, test everywhere）”。导致这种糟糕局面的一个可能原因据说是AWT从概念产生到完成实现只用了一个月。
在第二版的Java开发包中，AWT的器件很大程度上被Swing工具包替代。Swing通过自己绘制器件而避免了AWT的种种弊端:Swing调用本地图形子系统中的底层例程，而不是依赖操作系统的高层用户界面模块。 [1] 
层次结构编辑
层次
Java.awt包的层次结构
Java.awt包的层次结构
在AWT中，所有能在屏幕上显示的组件(component)对应的类，均是抽象类Component的子类或子孙类。这些类均可继承Component类的变量和方法。 Container类是Component的子类，它也是一个抽象类，它允许其他的组件(Component)加入其中。加入的Component也允许是Container类型，即允许多层嵌套的层次结构，Container类在将组件以合适的形式安排在屏幕上时很有用，它有两个子类，Panel和Window,它们不是抽象类。
独立
Window对应的类为java.awt.Windows, 它可独立于其他Container而存在，它有两个子类， Frame和Dialog, Frame是具有标题(title)和可伸缩的角(resize corner)的窗口(Window)。Dialog则没有菜单条，虽然它能移动，但不能伸缩。
滚动面板(ScrollPane)也是Window类的子类，这里就不讨论了。
Panel对应的类为java.awt.Panel，它可包含其他Container类型的组件，或包含在浏览器窗口中。Panel标识了一个矩形区域，该区域允许其他组件放入。Panel必须放在Window或其子类中才能显示。
使用方法编辑
java.awt包提供了基本的java程序的GUI设计工具。主要包括下述三个概念：
组件--Component
容器--Container
布局管理器--LayoutManager
组件
组件(Conponent)是图形用户界面最基本的部分，也称为构件，是可以以图形化的方式显示在屏幕上，并能与用户进行交互的对象，例如一个按钮，一个标签等。组件不能独立地显示出来，必须将其放在一定的容器中才可以显示。 类java.awt.Component是许多组件类的父类，Component类中封装了组件通用的方法和属性，如图形的组件对象、大小、显示位置、前景色和背景色、边界、可见性等。 [2] 
AWT常用组件
组件名称	构造方法	使用说明
按钮(Button)	Button b=new Button("退出");	单击按钮产生ActionEvent事件，实现ActionListener接口并重写actionPerformed()方法监听和处理事件
复选框(Checkbox)	Checkbox ch=new Checkbox("one",true);	选中复选框产生ItemAction事件，实现ItemListener接口监听和处理事件
下拉菜单(Choice)	Choice colorChoose=new Choice();	实现ItemListener接口监听和处理事件；Add()方法可在下拉列表中添加选项
画布(Canvas)	public Canvas(GraphicsConfigurationconfig);	重写Canvas类的paint()方法实现完成图形处理；实现MouseListener和KeyListener接口监听Canvas组件的鼠标和键盘事件
文本框(TextField)	
TextField ft=new TextField(16);
//宽度为16个字符
文本框只能显示一行，按Enter键时产生ActionEvent事件，通过ActionListener接口中的actionPerformed()方法处理事件
文本域(TextAera)	
TextArea ta=new TextArea("Textarea",4,10);
//4行10列
可显示多行多列文本和滚动条
列表框(List)	
List list=new List(4,false);
//4行，不允许多选
提供多个文本选项，支持滚动条，可以浏览多项
对话框(Dialog)		Window类的子类
文件对话框(FileDialog)	Filedialog fd=new Filedialog(frm,"fileddilog");	当用户想打开或存储文件时，可使用文件对话框进行操作
菜单栏(MenuBar)	MenuBar mb=new MenuBar();	通过frm.setMenuBar(mb)语句可将菜单mb设置为Frame对象frm的主菜单
下拉菜单(Menu)	Menu m=new Menu("Menu");	通过mb.add(m)可将m下拉列表添加到菜单栏中
菜单项(MenuItem)	MenuItem mi=new MenuItem("Openit");	通过mi.add(mi)将菜单项mi添加到下一个下拉列表m中。
颜色(Color)	
//非构造方法，两种方法设置组件背景色
setBackground(Color.BLUE);
setBackground(newColor(100,100,100));
通过setForeground()方法设置组件前景色，通过setBackground()方法设置组件背景色。颜色值可使用Color类的颜色常量来设置，也可通过指定RGB颜色对象值设置
字体(Font)	
Font font=new Font("宋体",Font.BOLD,10);
//宋体，10号，加粗
按顺序向Font()构造方法传递有关字体设置的参数
容器
容器(Container)也是一个类，实际上是Component的子类，因此容器本身也是一个组件，具有组件的所有性质，但是它的主要功能是容纳其它组件和容器。容器可以简化图形化界面的设计，以整体结构来布置界面。所有的容器都可以通过add()方法向容器中添加组件。常用的容器3种：Panel, Frame, Applet。 [2] 
框架(Frame)
构造方法：
1
Frame frm = new Frame("New Window");
要生成一个窗口，通常使用Window的子类Frame类进行实例化，而不是直接使用Window 类，框架的外观就像平常Windows系统下的窗口，有标题、边框、菜单和大小等。setSize()方法可以设置框架尺寸的大小，setVisibe()方法可以设置窗口的可见性。
面板(Panel)
构造方法：
1
Panel pnl = new Panel();
面板是一种透明的容器，没有标题和边框。与Frame 不同，Panel不能作为最外层的容器单独存在，它首先必须作为一个组件放置在其他容器（一般为Frame）中，然后把组件添加到它里面。在java.swing中则是JPanel。
小程序(Applet)
构造方法：
1
Applet apt = new Applet();
框架一般用作Java应用程序的窗口，而Applet是Java小程序的窗口。与Frame不同，Applet是在网页中显示的，也可以通过添加Panel进行组件布局。
布局管理器
布局管理器（LayoutManager）：每个容器都有一个布局管理器，当容器需要对某个组件进行定位或判断其大小、尺寸时，就会调用其对应的布局管理器。使用布局管理器可以实现跨平台的特性，并且获得动态的布局效果。布局管理器负责管理组件的排列顺序、大小和位置。不同的布局管理器使用不同的布局策略，容器可以通过选择不同的布局管理器来决定如何布局。 [2] 
流布局管理器(FlowLayout)
FlowLayout是Panel 和 Applet 的默认布局管理器。在该布局管理器中，组件在容器中按照从上到下，从左到右的顺序进行排列，行满后则换行。
构造方法较多，例如：
FlowLayout();
默认构造方法，设置居中对齐方式，横向和纵向间隔均为默认5像素
FlowLayout(FlowLayout.LEFT);
设置居左对齐，横向和纵向间隔均为默认5像素
FlowLayout(FlowLayout.RIGHT,20,40);
设置居右对齐，横向间隔20像素，纵向间隔40像
边界布局管理器(BorderLayout)
构造方法：
1
BorderLayout bl = new BorderLayout();
BorderLayout是Window、Frame和Dialog的默认布局管理器，其将容器分成North、South、East、West和Center 5个区域，每个区域只能放置一个组件。在使用add()方法添加组件到容器时，必须指定将其放置在哪个区域中。使用BorderLayout时，如果容器大小发生变换，组件的相对位置不变。 [2] 
网格布局管理器(GridLayout)
构造方法：
1
GridLayout gl = new GridLayout(3,5); //3行5列
GridLayout 可使容器中的各个组件呈网格状布局，平局占据容器的空间，即使容器的大小发生变化，每个组件还是平均占据容器的空间。和FlowLayout一样，GridLayout也是按照从上到下，从左到右的规律进行排列的。
卡片布局管理器(CardLayout)
构造方法：
1
CardLayout cl = new CardLayout();
CardLayout能够帮助用户处理两个乃至跟多的成员共享同一显示空间。它把容器分成许多层，每层的显示空间占据整个容器的大小，并且每层之允许反之一个组件，可以通过Panel来实现每层复杂的用户界面。
实例
使用Frame的例子：
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
import java.awt.*;
public class MyFrame extends Frame{
public static void main(String args[ ]){
MyFrame fr = new MyFrame("Hello Out There!");
//构造方法
fr.setSize(200,200);
//设置Frame的大小，缺省为（0，0）
fr.setBackground(Color.red);
//设置Frame的背景，缺省为红色
fr.setVisible(true);
//设置Frame为可见，缺省为不可见
}
public MyFrame (String str){
super(str); //调用父类的构造方法
}
}
以下是一个FlowLayout示例小程序代码：　
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
package org.gan.awt;
import java.awt.Button;
import java.awt.Frame;
import java.awt.Panel;
public class FlowLayoutManager {
public static void main(String[] args) {
// 创建Frame对象
Frame f = new Frame();
// 创建panel容器
Panel p = new Panel();
p.add(new Button("1"));// 默认垂直居中，间距为5
p.add(new Button("2"));
p.add(new Button("3"));
p.add(new Button("4"));
p.add(new Button("5"));
p.add(new Button("6"));
p.add(new Button("7"));
p.add(new Button("8"));p.add(new Button("9"));
f.add(p);
// 设置Frame标题
f.setTitle("我的第二个FlowLayoutManager程序");
// 设置Frame尺寸,默认为(0,0) f.setSize(200, 200);
// 设置是否可见，默认为false
f.setVisible(true);
}
}
结果为：
